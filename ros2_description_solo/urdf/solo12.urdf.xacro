<?xml version="1.0" ?>
<robot name="solo" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:property name="color_name" value="grey"/>
    <xacro:property name="color" value="0.8 0.8 0.8"/>
    <xacro:property name="opacity" value="1.0"/>
    <xacro:property name="mesh_ext" value="stl"/>

    <xacro:arg name="use_fake_hardware" default="true"/>
    <xacro:arg name="prefix" default=""/>

    <!-- remove if using crane -->
    <link name="dummy"/>

    <!-- Include the crane if simulation -->
    <!--        <xacro:if value="$(arg use_sim)">-->
    <!--            <xacro:include filename="$(find ros2_description_solo)/urdf/crane.urdf.xacro" />-->
    <!--        </xacro:if>-->
    <!--        <xacro:if value="$(arg use_sim)">-->
    <!--            <xacro:crane parent="base_link" />-->
    <!--        </xacro:if>-->

    <!-- remove if using crane -->
    <joint name="dummy_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <!--        <parent link="dummy"/>-->
        <!--        <child link="base_link"/>-->
        <parent link="base_link"/>
        <child link="dummy"/>
    </joint>

    <!-- This file is based on https://atlas.is.localnet/confluence/display/AMDW/Quadruped+URDF+Files -->
    <link name="base_link">
        <!-- BASE LINK INERTIAL -->
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="1.16115091"/>
            <!-- The base is extremely symmetrical. -->
            <inertia ixx="0.00578574" ixy="0.0" ixz="0.0"
                     iyy="0.01938108" iyz="0.0"
                     izz="0.02476124"
            />
        </inertial>
        <!-- BASE LINK VISUAL -->
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find ros2_description_solo)/meshes/${mesh_ext}/solo12/solo_12_base.${mesh_ext}"/>
            </geometry>
            <material name="${color_name}">
                <color rgba="${color} ${opacity}"/>
            </material>
        </visual>
        <!-- BASE LINK COLLISION -->
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find ros2_description_solo)/meshes/${mesh_ext}/solo12/solo_12_base.${mesh_ext}"/>
            </geometry>
            <material name="${color_name}">
                <color rgba="${color} ${opacity}"/>
            </material>

        </collision>
    </link> <!-- END BASE LINK -->

    <!-- Include the legs -->
    <xacro:include filename="leg.xacro"/>

    <!-- Include the front left leg -->
    <xacro:leg
            prefix="FL"
            is_front="true"
            is_right="false"
            has_side_motion="true"
            mesh_ext="${mesh_ext}"
            color_name="${color_name}"
            color="${color}"
            opacity="${opacity}"/>

    <!-- Include the front right leg -->
    <xacro:leg
            prefix="FR"
            is_front="true"
            is_right="true"
            has_side_motion="true"
            mesh_ext="${mesh_ext}"
            color_name="${color_name}"
            color="${color}"
            opacity="${opacity}"/>


    <!--     Include the hind left leg-->
    <xacro:leg
            prefix="HL"
            is_front="false"
            is_right="false"
            has_side_motion="true"
            mesh_ext="${mesh_ext}"
            color_name="${color_name}"
            color="${color}"
            opacity="${opacity}"/>


    <!--     Include the hind right leg-->
    <xacro:leg
            prefix="HR"
            is_front="false"
            is_right="true"
            has_side_motion="true"
            mesh_ext="${mesh_ext}"
            color_name="${color_name}"
            color="${color}"
            opacity="${opacity}"/>

    <xacro:include filename="$(find ros2_description_solo)/ros2_control/system_solo.ros2_control.xacro"/>
    <xacro:system_solo_ros2_control
            name="SystemSoloRos2Control" prefix="$(arg prefix)" use_fake_hardware="$(arg use_fake_hardware)"
            use_sim="$(arg use_sim)"
    />

    <gazebo reference="base_link">
        <material>Gazebo/White</material>
<!--        <selfCollide>true</selfCollide>-->
        <!--        <gravity>true</gravity>-->
    </gazebo>

    <gazebo>
        <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
            <parameters>$(find ros2_control_solo_bringup)/config/solo_gazebo_forward_controller_position.yaml
            </parameters>
        </plugin>
    </gazebo>

</robot>
