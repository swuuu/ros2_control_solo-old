<?xml version="1.0" ?>
<robot name="solo" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:property name="color_name" value="grey"/>
    <xacro:property name="color" value="0.8 0.8 0.8"/>
    <xacro:property name="opacity" value="1.0"/>
    <xacro:property name="mesh_ext" value="stl"/>

    <xacro:arg name="use_fake_hardware" default="true"/>
    <xacro:arg name="prefix" default=""/>

    <!-- remove if using crane -->
    <link name="dummy"/>

    <!-- This file is based on https://atlas.is.localnet/confluence/display/AMDW/Quadruped+URDF+Files -->
    <link name="base_link">
        <!-- BASE LINK INERTIAL -->
        <inertial>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <mass value="1.16115091"/>
            <!-- The base is extremely symmetrical. -->
            <inertia ixx="0.00578574" ixy="0.0" ixz="0.0"
                     iyy="0.01938108" iyz="0.0"
                     izz="0.02476124"
            />
        </inertial>
        <!-- BASE LINK VISUAL -->
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find ros2_description_solo)/meshes/${mesh_ext}/solo12/solo_12_base.${mesh_ext}"/>
            </geometry>
            <material name="${color_name}">
                <color rgba="${color} ${opacity}"/>
            </material>
        </visual>
        <!-- BASE LINK COLLISION -->
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <mesh filename="file://$(find ros2_description_solo)/meshes/${mesh_ext}/solo12/solo_12_base.${mesh_ext}"/>
            </geometry>
            <material name="${color_name}">
                <color rgba="${color} ${opacity}"/>
            </material>

        </collision>
        <!-- Bullet specific paramters -->
<!--        <contact>-->
<!--            <lateral_friction value="1.0"/>-->
<!--            <restitution value="0.5"/>-->
<!--        </contact>-->
    </link> <!-- END BASE LINK -->

    <!-- Include the crane if simulation -->
<!--        <xacro:if value="$(arg use_sim)">-->
<!--            <xacro:include filename="$(find ros2_description_solo)/urdf/crane.urdf.xacro" />-->
<!--        </xacro:if>-->
<!--        <xacro:if value="$(arg use_sim)">-->
<!--            <xacro:crane parent="base_link" />-->
<!--        </xacro:if>-->

    <!-- Include the legs -->
    <xacro:include filename="leg.xacro"/>

    <!-- Include the front left leg -->
    <xacro:leg
            prefix="FL"
            is_front="true"
            is_right="false"
            has_side_motion="true"
            mesh_ext="${mesh_ext}"
            color_name="${color_name}"
            color="${color}"
            opacity="${opacity}"/>

    <!-- Include the front right leg -->
    <xacro:leg
            prefix="FR"
            is_front="true"
            is_right="true"
            has_side_motion="true"
            mesh_ext="${mesh_ext}"
            color_name="${color_name}"
            color="${color}"
            opacity="${opacity}"/>


    <!--     Include the hind left leg-->
    <xacro:leg
            prefix="HL"
            is_front="false"
            is_right="false"
            has_side_motion="true"
            mesh_ext="${mesh_ext}"
            color_name="${color_name}"
            color="${color}"
            opacity="${opacity}"/>


    <!--     Include the hind right leg-->
    <xacro:leg
            prefix="HR"
            is_front="false"
            is_right="true"
            has_side_motion="true"
            mesh_ext="${mesh_ext}"
            color_name="${color_name}"
            color="${color}"
            opacity="${opacity}"/>

    <xacro:include filename="$(find ros2_description_solo)/ros2_control/system_solo.ros2_control.xacro"/>
    <xacro:system_solo_ros2_control
            name="SystemSoloRos2Control" prefix="$(arg prefix)" use_fake_hardware="$(arg use_fake_hardware)"
            use_sim="$(arg use_sim)"
    />

    <!-- remove if using crane -->
    <joint name="dummy_joint" type="fixed">
        <origin xyz="0 0 0" rpy="0 0 0"/>
<!--        <parent link="dummy"/>-->
<!--        <child link="base_link"/>-->
                <parent link="base_link"/>
                <child link="dummy"/>
    </joint>

    <gazebo reference="base_link">
        <material>Gazebo/White</material>
<!--        <selfCollide>true</selfCollide>-->
        <!--        <gravity>true</gravity>-->
    </gazebo>

    <gazebo>
        <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
            <parameters>$(find ros2_control_solo_bringup)/config/solo_gazebo_forward_controller_position.yaml
            </parameters>
        </plugin>
    </gazebo>

    <!-- IMU Sensor -->
<!--    <xacro:macro name="box_inertia" params="m w h d">-->
<!--        <inertial>-->
<!--            <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2}"/>-->
<!--            <mass value="${m}"/>-->
<!--            <inertia ixx="${(m/12) * (h*h + d*d)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (w*w + d*d)}" iyz="0.0"-->
<!--                     izz="${(m/12) * (w*w + h*h)}"/>-->
<!--        </inertial>-->
<!--    </xacro:macro>-->

<!--    <link name="imu_link">-->
<!--        <visual>-->
<!--            <geometry>-->
<!--                <box size="0.1 0.1 0.1"/>-->
<!--            </geometry>-->
<!--        </visual>-->
<!--        <collision>-->
<!--            <geometry>-->
<!--                <box size="0.1 0.1 0.1"/>-->
<!--            </geometry>-->
<!--        </collision>-->
<!--        <xacro:box_inertia m="0.1" w="0.1" d="0.1" h="0.1"/>-->
<!--    </link>-->

<!--    <joint name="imu_joint" type="fixed">-->
<!--        <parent link="base_link"/>-->
<!--        <child link="imu_link"/>-->
<!--        <origin xyz="0 0 0.01"/>-->
<!--    </joint>-->

<!--    <gazebo reference="imu_link">-->
<!--        <gravity>true</gravity>-->
<!--        <sensor name="imu_sensor" type="imu">-->
<!--            <always_on>true</always_on>-->
<!--            <update_rate>100</update_rate>-->
<!--            <visualize>true</visualize>-->
<!--            <topic>__default_topic__</topic>-->
<!--            <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">-->
<!--                <ros>-->
<!--                    <namespace>/demo</namespace>-->
<!--                    <remapping>~/out:=imu</remapping>-->
<!--                </ros>-->
<!--                &lt;!&ndash;                <topicName>imu</topicName>&ndash;&gt;-->
<!--                &lt;!&ndash;                <bodyName>imu_link</bodyName>&ndash;&gt;-->
<!--                &lt;!&ndash;                <updateRateHZ>10.0</updateRateHZ>&ndash;&gt;-->
<!--                &lt;!&ndash;                <gaussianNoise>0.0</gaussianNoise>&ndash;&gt;-->
<!--                &lt;!&ndash;                <xyzOffset>0 0 0</xyzOffset>&ndash;&gt;-->
<!--                &lt;!&ndash;                <rpyOffset>0 0 0</rpyOffset>&ndash;&gt;-->
<!--                &lt;!&ndash;                <frameName>imu_link</frameName>&ndash;&gt;-->
<!--                <initialOrientationAsReference>false</initialOrientationAsReference>-->
<!--            </plugin>-->
<!--            <imu>-->
<!--                <angular_velocity>-->
<!--                    <x>-->
<!--                        <noise type="gaussian">-->
<!--                            <mean>0.0</mean>-->
<!--                            <stddev>2e-4</stddev>-->
<!--                            <bias_mean>0.0000075</bias_mean>-->
<!--                            <bias_stddev>0.0000008</bias_stddev>-->
<!--                        </noise>-->
<!--                    </x>-->
<!--                    <y>-->
<!--                        <noise type="gaussian">-->
<!--                            <mean>0.0</mean>-->
<!--                            <stddev>2e-4</stddev>-->
<!--                            <bias_mean>0.0000075</bias_mean>-->
<!--                            <bias_stddev>0.0000008</bias_stddev>-->
<!--                        </noise>-->
<!--                    </y>-->
<!--                    <z>-->
<!--                        <noise type="gaussian">-->
<!--                            <mean>0.0</mean>-->
<!--                            <stddev>2e-4</stddev>-->
<!--                            <bias_mean>0.0000075</bias_mean>-->
<!--                            <bias_stddev>0.0000008</bias_stddev>-->
<!--                        </noise>-->
<!--                    </z>-->
<!--                </angular_velocity>-->
<!--                <linear_acceleration>-->
<!--                    <x>-->
<!--                        <noise type="gaussian">-->
<!--                            <mean>0.0</mean>-->
<!--                            <stddev>1.7e-2</stddev>-->
<!--                            <bias_mean>0.1</bias_mean>-->
<!--                            <bias_stddev>0.001</bias_stddev>-->
<!--                        </noise>-->
<!--                    </x>-->
<!--                    <y>-->
<!--                        <noise type="gaussian">-->
<!--                            <mean>0.0</mean>-->
<!--                            <stddev>1.7e-2</stddev>-->
<!--                            <bias_mean>0.1</bias_mean>-->
<!--                            <bias_stddev>0.001</bias_stddev>-->
<!--                        </noise>-->
<!--                    </y>-->
<!--                    <z>-->
<!--                        <noise type="gaussian">-->
<!--                            <mean>0.0</mean>-->
<!--                            <stddev>1.7e-2</stddev>-->
<!--                            <bias_mean>0.1</bias_mean>-->
<!--                            <bias_stddev>0.001</bias_stddev>-->
<!--                        </noise>-->
<!--                    </z>-->
<!--                </linear_acceleration>-->
<!--            </imu>-->
<!--            &lt;!&ndash;            <pose>0 0 0 0 0 0</pose>&ndash;&gt;-->
<!--        </sensor>-->
<!--    </gazebo>-->

</robot>
